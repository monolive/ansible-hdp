---


# install & configure ambari-server 
  - name: install different packages ( Mysql related + curl)
    yum: name={{ item }} state=present
    with_items:
      - mysql-connector-java
      - mysql
      - MySQL-python
      - python-httplib2
      - curl
    when: hostvars[groups['db_server'][0]]['db_flavour'] == "mysql"

  - name: install ambari-server
    yum: name=ambari-server state=present
    register: ambari_installed
  
  - name: import ambari-server schema
    mysql_db: name={{ hostvars[groups['db_server'][0]]['ambari_db'] }} state=import login_host={{ hostvars[groups['db_server'][0]]['ansible_fqdn'] }} login_user={{ hostvars[groups['db_server'][0]]['ambari_user'] }} login_password={{ hostvars[groups['db_server'][0]]['ambari_password'] }}  target=/var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql
    when: ambari_installed|changed and hostvars[groups['db_server'][0]]['db_flavour'] == "mysql"

  - name: configure ambari to use mysql
    shell: /usr/sbin/ambari-server setup --jdbc-db=mysql --jdbc-driver=/usr/share/java/mysql-connector-java.jar
    when: ambari_installed|changed and hostvars[groups['db_server'][0]]['db_flavour'] == "mysql"

  - name: configure ambari server with mysql
    shell: /usr/sbin/ambari-server setup -s --database=mysql --databasehost={{ hostvars[groups['db_server'][0]]['ansible_fqdn'] }} --databaseport=3306 --databasename={{ hostvars[groups['db_server'][0]]['ambari_db'] }}  --databaseusername={{ hostvars[groups['db_server'][0]]['ambari_user'] }}  --databasepassword={{ hostvars[groups['db_server'][0]]['ambari_password'] }}  -j {{ java_home }}
    when: ambari_installed|changed and hostvars[groups['db_server'][0]]['db_flavour'] == "mysql"

# Restart ambari server has status return rubbish value
  - name: start ambari server
    service: name=ambari-server state=restarted enabled=on
    register: ambari_up

  - name: check if ambari server is up
    wait_for: state=started port=8080 delay=15
    when: ambari_up|changed

  - name: get register hosts
    uri: 
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/hosts
      method: GET
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      force_basic_auth: yes
      return_content: yes

  - name: change HDP repo URL
    uri: 
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/stacks/HDP/versions/{{ hdp_stack }}/operating_systems/redhat6/repositories/HDP-{{ hdp_stack }}
      method: PUT
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      body: "{{ lookup('template', '../templates/hdp_repo_body.json.j2') }}" # adding ../templates as a workaround for ansible bug
      force_basic_auth: yes
      return_content: yes
      body_format: json
 
  - name: change HDP-UTIL repo URL
    uri: 
      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/stacks/HDP/versions/{{ hdp_stack }}/operating_systems/redhat6/repositories/HDP-UTILS-{{ hdp_utils }}
      method: PUT
      user: admin
      password: admin
      HEADER_X-Requested-By: ambari
      body: "{{ lookup('template', '../templates/hdp_util_repo_body.json.j2') }}" # aadding ../templates as a workaround for ansible bug
      force_basic_auth: yes
      return_content: yes
      body_format: json
 
  - name: copy blueprint
    copy: src=../../../blueprints/hdp-2.3-hbase-noha.json dest=/tmp/blueprint.json
    register: blueprint

  - name: copy host-mapping
    template: src=../../../blueprints/host-mapping.json.j2 dest=/tmp/host-mapping.json
    register: hostmap

  - name: copy template script
    template: src=register_launch.sh.j2 dest=/tmp/register_launch.sh mode=0755 
    when: blueprint|changed or hostmap|changed

  - name: register blueprint & hostmap
    shell: /tmp/register_launch.sh
    when: blueprint|changed or hostmap|changed

#  - name: wait for installation to complete
#    wait_for: ...

# Opened a bug for both issues - eg password is not set for hive / oozie 
#  - name: Fix blueprint issues 

#  /var/lib/ambari-server/resources/scripts/configs.sh


# I've updated my uri module from the dev version as it was failing out when using 1.9.2 
# https://raw.githubusercontent.com/ansible/ansible-modules-core/devel/network/basics/uri.py
#  - name: register blueprint
#    uri: 
#      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/blueprints/{{ cluster_name }}
#      method: POST
#      user: admin
#      password: admin
#      HEADER_X-Requested-By: ambari
#      body: "{{ lookup('file', '../../../blueprints/hdp-2.3-hbase-noha.json') }}" 
#      force_basic_auth: yes
#      return_content: yes
#      body_format: json
#      status_code: 201

#  - name: register host mapping
#    uri: 
#      url: http://{{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }}:8080/api/v1/blueprints/{{ cluster_name }}
#      method: POST
#      user: admin
#      password: admin
#      HEADER_X-Requested-By: ambari
#      body: "{{ lookup('file', '../../../blueprints/host-mapping.json') }}" 
#      force_basic_auth: yes
#      return_content: yes
#      body_format: json
#      status_code: 201
